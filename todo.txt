project infrastructure
- gcc support

refactor
- add possibility to register librespot as a win service to avoid interrupting music when far is closed
- working with plpaylists through Use the snapshot_id to reduce amount of requests
- investigate "market" fields for some API requests, for now completly
- parallelize playlists and saved tracks request via pool, using offset and limit fields
- propagate spotify settings to librespot: normalisation, autoplay-similar, bitrate and etc. https://github.com/librespot-org/librespot/wiki/Options

application ideas
- grab lyrics from here? https://lrclib.net/
- is there other way to track fresh releases?
- panels
    - ctrl + I - filtering of albums? singles/EPs/LPs; maybe something else?
    - managing playlists via standard Far functions: create folder, move/remove from panel
    - F3 on folders -> start playback
    - comamnds for console input?
    - show track progress on the win tray icon with ACTL_SETPROGRESSSTATE
- player UI
    - goto playlist
    - recreate a volume control into slider?

bugs
- big http cache causes plugin to freeze while closing
- metallica ride the lightning delux has multiply discs, show incorrectly on the panel
- Bi-2, Мяу Кисс ми; 5th track is empty


user's profile
root menu
    - collection
        - artists
            - top tracks
            - albums
            - related artists? no knows source so far
        - playlists
        - albums
        - tracks
    - recents
        - releases
        - history
            - artists
            - albums
            - playlists
            - tracks
        - top items
        - search?

//// sample how to show loading splash screen

    // TODO: unfinished, ugly
    json url(request_url);

    size_t entries_received = 0;
    auto ss = config::ps_info.SaveScreen(0, 0, -1, -1);
    wstring message = L"Loading\nRequesting data...";

    do
    {
        config::ps_info.Message(&MainGuid,&FarMessageGuid,
            FMSG_ALLINONE,
            L"",
            (const wchar_t * const *)message.c_str(),
            0,0);

        auto r = api->get(url);
        if (utils::http::is_success(r->status))
        {
            json data = json::parse(r->body);
            if (!data_key.empty())
                data = data.at(data_key);

                url = data["next"];

            const auto &entries = data["items"].get<T>();
            result.insert(result.end(), entries.begin(), entries.end());
            
            entries_received += entries.size();
            message = std::format(L"Loading\nEntries received {}/{}",
                entries_received, data["total"].get<int>());
        }
    }
    while (!url.is_null());

    config::ps_info.RestoreScreen(ss);